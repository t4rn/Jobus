// <auto-generated />
using Jobus.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Jobus.DataAccess.Migrations
{
    [DbContext(typeof(JobusDbContext))]
    [Migration("20180514090639_Job")]
    partial class Job
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("jobus")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("Jobus.Domain.Jobs.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("add_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Input")
                        .HasColumnName("input")
                        .HasColumnType("json");

                    b.Property<string>("Output")
                        .HasColumnName("output")
                        .HasColumnType("json");

                    b.Property<DateTime?>("OutputDate")
                        .HasColumnName("output_date");

                    b.Property<string>("TypeCode")
                        .IsRequired()
                        .HasColumnName("job_type")
                        .HasMaxLength(8);

                    b.Property<int>("WsClientId")
                        .HasColumnName("id_ws_client");

                    b.HasKey("Id")
                        .HasName("pk_job");

                    b.HasIndex("TypeCode")
                        .HasName("ix_job_job_type");

                    b.HasIndex("WsClientId")
                        .HasName("ix_job_id_ws_client");

                    b.ToTable("job");
                });

            modelBuilder.Entity("Jobus.Domain.Jobs.JobQueue", b =>
                {
                    b.Property<long>("JobId")
                        .HasColumnName("id_job");

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("add_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ErrorMsg")
                        .HasColumnName("error_msg");

                    b.Property<DateTime?>("ProcessEndDate")
                        .HasColumnName("process_end_date");

                    b.Property<DateTime?>("ProcessStartDate")
                        .HasColumnName("process_start_date");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasColumnName("job_status")
                        .HasMaxLength(8);

                    b.Property<string>("TypeCode")
                        .IsRequired()
                        .HasColumnName("job_type")
                        .HasMaxLength(8);

                    b.HasKey("JobId")
                        .HasName("pk_job_queue");

                    b.HasIndex("StatusCode")
                        .HasName("ix_job_queue_job_status");

                    b.HasIndex("TypeCode")
                        .HasName("ix_job_queue_job_type");

                    b.ToTable("job_queue");
                });

            modelBuilder.Entity("Jobus.Domain.Jobs.JobStatus", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("code")
                        .HasMaxLength(8);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("add_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(32);

                    b.Property<bool>("Ghost")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ghost")
                        .HasDefaultValue(false);

                    b.HasKey("Code")
                        .HasName("pk_dic_job_status");

                    b.ToTable("dic_job_status");
                });

            modelBuilder.Entity("Jobus.Domain.Jobs.JobType", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("code")
                        .HasMaxLength(8);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("add_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(32);

                    b.Property<bool>("Ghost")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ghost")
                        .HasDefaultValue(false);

                    b.HasKey("Code")
                        .HasName("pk_dic_job_type");

                    b.ToTable("dic_job_type");
                });

            modelBuilder.Entity("Jobus.Domain.WsClients.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnName("action")
                        .HasMaxLength(32);

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("add_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnName("controller")
                        .HasMaxLength(16);

                    b.HasKey("Id")
                        .HasName("pk_resource");

                    b.HasIndex("Controller", "Action")
                        .IsUnique()
                        .HasName("controller_action_unique");

                    b.ToTable("resource");

                    b.HasAnnotation("Npgsql:Comment", "Api resources");
                });

            modelBuilder.Entity("Jobus.Domain.WsClients.WsClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("AddDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("add_date")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Ghost")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ghost")
                        .HasDefaultValue(false);

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnName("hash")
                        .HasMaxLength(16);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("client_name")
                        .HasMaxLength(32);

                    b.HasKey("Id")
                        .HasName("pk_ws_clients");

                    b.HasIndex("Hash")
                        .IsUnique()
                        .HasName("ws_clients_hash_unique");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ws_clients_name_unique");

                    b.ToTable("ws_clients");

                    b.HasAnnotation("Npgsql:Comment", "Table with api clients");
                });

            modelBuilder.Entity("Jobus.Domain.WsClients.WsClientResource", b =>
                {
                    b.Property<int>("WsClientId")
                        .HasColumnName("id_ws_client");

                    b.Property<int>("ResourceId")
                        .HasColumnName("id_resource");

                    b.HasKey("WsClientId", "ResourceId")
                        .HasName("pk_ws_client_resource");

                    b.HasIndex("ResourceId")
                        .HasName("ix_ws_client_resource_id_resource");

                    b.ToTable("ws_client_resource");

                    b.HasAnnotation("Npgsql:Comment", "Table with controllers and actions allowed for api clients");
                });

            modelBuilder.Entity("Jobus.Domain.Jobs.Job", b =>
                {
                    b.HasOne("Jobus.Domain.Jobs.JobType", "Type")
                        .WithMany("Jobs")
                        .HasForeignKey("TypeCode")
                        .HasConstraintName("fk_job_dic_job_type_job_type")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Jobus.Domain.WsClients.WsClient", "WsClient")
                        .WithMany("Jobs")
                        .HasForeignKey("WsClientId")
                        .HasConstraintName("fk_job_ws_clients_id_ws_client")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Jobus.Domain.Jobs.JobQueue", b =>
                {
                    b.HasOne("Jobus.Domain.Jobs.Job", "Job")
                        .WithOne("JobQueue")
                        .HasForeignKey("Jobus.Domain.Jobs.JobQueue", "JobId")
                        .HasConstraintName("fk_job_queue_job_id_job")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Jobus.Domain.Jobs.JobStatus", "Status")
                        .WithMany("JobQueues")
                        .HasForeignKey("StatusCode")
                        .HasConstraintName("fk_job_queue_dic_job_status_job_status")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Jobus.Domain.Jobs.JobType", "Type")
                        .WithMany("JobQueues")
                        .HasForeignKey("TypeCode")
                        .HasConstraintName("fk_job_queue_dic_job_type_job_type")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Jobus.Domain.WsClients.WsClientResource", b =>
                {
                    b.HasOne("Jobus.Domain.WsClients.Resource", "Resource")
                        .WithMany("ClientsPermissions")
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("fk_ws_client_resource_resource_id_resource")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Jobus.Domain.WsClients.WsClient", "WsClient")
                        .WithMany("ClientsResources")
                        .HasForeignKey("WsClientId")
                        .HasConstraintName("fk_ws_client_resource_ws_clients_id_ws_client")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
